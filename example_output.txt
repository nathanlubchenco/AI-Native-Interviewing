    Stage 1 – Prompt-to-Prototype take-home
    Example question:
    “Build a small command-line tool in Python that reads a CSV of customer transactions, aggregates total spend per customer, and outputs a JSON report. You may use any AI assistant to help you think through edge cases or
     shape your code, but you do not have to call an AI from your code. Submit:
     • A clear prompt transcript or brief notes showing how you used AI (optional)
     • A pytest suite covering typical and edge cases (e.g. missing fields, malformed rows)
     • A one-page design note explaining directory layout, how you structured tests, and any linting/style choices.”

    Stage 2 – Live debugging drill
    Example question:
    “We’ve provided a small Node.js service in exercises/stage2-debugging. It exposes a POST /order endpoint but currently throws a TypeError: Cannot read property "id" of undefined when you hit it. Over 45 min you should:
      • Reproduce the failure (e.g. via curl or Postman)
      • Use AI or your normal debugging tools to form and test hypotheses
      • Fix the root cause in code
      • Add a unit or integration test that prevents regression

    Submit:
     • A one-paragraph decision diary logging each hypothesis and any AI prompts you used
     • Your patched code and new test”

    Stage 3 – System-design discussion
    Example question:
    “Design a scalable, low-latency recommendation system for a streaming service using large language models to personalize content. In a 60 min whiteboard/Miro session:
      • Sketch the end-to-end architecture (hand-drawn or ASCII OK)
      • List key services, data flows, and storage components
      • State your key constraints (e.g. ≤ 100 ms tail latency, $0.02/request)
      • Justify any AI/ML choices (model type, fine-tuning vs. prompting, monitoring)
    You may consult AI, but your final diagram and rationale must be fully your own.”

    Stage 4 – Code-review simulation
    Example question:
    “In exercises/stage4-code-review you’ll find a main.go and a patch buggy_auth.patch that adds JWT-based auth. Apply the patch locally (git init && git apply buggy_auth.patch), then in 30 min:
      • Provide inline review comments calling out at least three security, performance, or style issues
      • Suggest concrete fixes or mitigations for each risk
      • Keep feedback clear and actionable”

    Stage 5 – Behavioral & collaboration interview
    Example question:
    “Tell me about a time you led a critical project under uncertainty (e.g. shifting requirements, new tech, remote teams). Walk us through:
      • How you took ownership of the outcome
      • How you fostered a blameless, collaborative environment
      • Concrete examples of how you multiplied your team’s impact (mentorship, tooling, processes)”
